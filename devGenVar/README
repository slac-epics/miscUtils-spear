devGenVar - device support for connecting basic C/C++ variables to EPICS records
================================================================================

NOTE:    The authoritative API documentation is the 'devGenVar.h' header file.

Purpose: Often, low-level code uses basic variables (int/short/double/...) which
         you either want to read or write via EPICS records.

         This device-support eases this task and offers some additional features:
           - minimal coding overhead.
           - notify (input) records when C-variables have changed via EPICS scan-lists
             ("I/O Intr" scanning)
           - notify low-level C-code when EPICS (output) record modifies C-variable
             or is done reading the C-variable (input record).
           - EPICS DBR types supported; use EPICS conversion facility to convert
             from C-variable (DBR-type) to/from EPICS record field.
           - optional locking for serializing access to C-variable

Example 1: You have a low-level task which updates a statistics counter 'myCounter'
         that you want to make available as an EPICS PV:

         !!!!!!!!!!!!! C-Code !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

         #include <devGenVar.h> 

         /* Your C-variable  */
         epicsUInt32  myCounter = 0;

         /* Scan-list to notify attached record */
         IOSCANPVT    myList;

         /* Connector object */
         DevGenVarRec myGenVar = {
           DEV_GEN_VAR_INIT( &myList, 0, 0, &myCounter, DBR_ULONG)
         };

         /* INITIALIZATION   */
         /* init scanlist    */
         scanIoInit( &myList );
         /* create mutex     */
         devGenVarLockCreate( &myGenVar );
         /* register name    */
		 devGenVarRegister( "myVars", &myGenVar, 1 );

         /* RUN-TIME ACCESS  */
         /* Code updates counter */
         devGenVarLock( &myGenVar );
           myCounter++;
           scanIoRequest( myList );
         devGenVarUnlock( &myGenVar );

         !!!!!!!!!!!!! EPICS Database !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         # Use 'AI' record to read 'myCounter'

         record(ai,"MYCOUNTER") {
           field(DTYP, "GenVar")
           #refer to name used by 'devGenVarRegister'
           field(INP,  "C0S0@myVars")
           field(SCAN, "I/O Intr")
         }

         # Use longout record to write 'myCounter'
         record(longout "WR_COUNT") {
           field(DTYP, "GenVar")
           field(OUT,  "C0S0@myVars")
           # must use CA link or MYCOUNTER is only updated if Passive 
           field(FLNK, "MYCOUNTER.PROC CA")
         }

Example 2: Notify low-level task when writing a record.

         !!!!!!!!!!!!! C-Code !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

         #include <devGenVar.h> 

         /* A dummy variable - we just want to notify a task when
          * this is written but not actually do anything with the
          * value...
          */
         epicsUInt32  myDummy = 0;

         /* Connector object */
         DevGenVarRec myGenVar = {
           DEV_GEN_VAR_INIT( 0, 0, 0, &myDummy, DBR_ULONG)
         };

         /* INITIALIZATION   */
         /* create event     */
         devGenVarEvtCreate( &myGenVar );
         /* register name    */
		 devGenVarRegister( "myVars", &myGenVar, 1 );

         /* RUN-TIME ACCESS  */
         /* Code blocks for event which is posted when
          * 'myDummy' is written. Since we don't care about
          * the actual value of 'myDummy' no mutex is required...
		  */
         while (1) {
           devGenVarWait( &myGenVar, -1.0 /* forever */ );
           do_work();
         }

         !!!!!!!!!!!!! EPICS Database !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         # Use 'longout' to notify task

         record(longout,"MYNOTIFY") {
           field(DTYP, "GenVar")
           field(OUT,  "C0S0@myVars")
         }

Details:
--------
The connection between a record/devsup and a user variable is described
with a 'DevGenVarRec' struct. Pointers to these structs are associated
with a symbolic name and entered into the EPICS registry by your low-level
code.

Records in the EPICS database select a particular 'DevGenVarRec' 
by means of their INP/OUT field definitions. These links must be of
type VME_IO and list the symbolic name in the 'parm' specification of
the link after the '@' character. A VME_IO link has the form

  Cx Sy @parm

The 'card' number following 'C', in this case: 'x' selects a particular
'instance'. I.e, an entire array of DevGenVarRec's can be registered
under a single name and 'x' is then used as an index into this array.

The 'signal' number 'y' specifies optional flags which some records
support. Multiple flags can be ORed together. The currently supported
flags have the following semantics:

  1: No-conversion. Certain record types (ai, bi, mbbi, ao, ...) 
     support the concept of 'no-conversion'. If this flag is set
     then the record's conversion is bypassed (consult EPICS
     documentation if you are not familiar with this concept).

  2: Asynchronous processing. Currently only supported for output
     records (see 'Asynchronous Processing' below).

  4: No-post. Suppress sending the event present in the 'DevGenVar'
     struct. This may be desirable if multiple records are associated
     with a single DevGenVar and the user does not want all of them
     to post the event.

A DevGenVarRec must be allocated and initialized by your application.
Initialization can be done with the devGenVarInit() routine or with
the DEV_GEN_VAR_INIT() macro which is useful for statically allocated
structs. These helpers bring the struct into a defined state but
it may still be necessary to assign individual fields (especially
in the case of devGenVarInit() which basically zeros out the entire
structure. The individual fields have the following semantics:

scan_p:     (optional) pointer to a IOSCANPVT object defining
            the scan-list any record connecting to this particular
            DevGenVarRec is using when it's SCAN field is set to
            "I/O Intr".
            Note that multiple DevGenVarRec's may refer to the
            same IOSCANPVT/scan-list.
            Note also, that it is your responsability to initialize
            the IOSCANPVT object. 'scan_p' is merely a *pointer*
            to this object.
            The intended use is that your code calls scanIoRequest()
            on the associated IOSCANPVT whenever all or any of the
            variables connected to the DevGenVarRec's referring to
            this IOSCANPVT change.

            Note that in many cases (slow monitoring) a scan-list
            is not necessary but the record can just be scanned
            periodically. However, if you want to record timestamps
            for rare events then a scan-list is a better solution
            (unless you monitor for changes and record timestamps
            on the client side).

mtx:        (optional) mutex to serialize access to your (*data_p)
            variable. All read/write/read-modify-write access performed
            by the devsup module acquires and releases the mutex
            (if it is present). It is your responsability to lock/unlock
            the same mutex when accessing your variable from your low-level
            code. It is also your responsibility to create the mutex
            and attach it to the DevGenVarRec. It is perfectly legal
            for multiple DevGenVarRec's / variables to share a single
            mutex.

evt:        (optional) event that can be used to notify your code
            when the record is done processing. It is your responsibility
            to create an event (devGenVarEvtCreate()).

data_p:     pointer to your variable

dbr_t:      EPICS DBR type of your variable. It is crucial that this
            type MATCHES the true type of your variable. Note that the
            DBR_LONG and DBR_ULONG were designed for 32-bit machines
            and DO NOT match 'long' and 'unsigned long', respectively.
            You MUST use epicsInt32/epicUInt32 variables in order
            for your code to be portable to 64-bit architectures.
            It is a good idea to use explicit types from epicsTypes.h
            for your variables!

            Note that the 'dbr_t' may well differ from the type of
            the connected record field -- EPICS' data conversion
            facility is employed for proper conversion.

ts:         Timestamp. This member provides a way for low-level code
            to propagate a time-stamp to associated records. If
            an input record has TSE==-2 then it's TIME field will
            be set with the GenVar's timestamp. Output records
            don't use this field. (Exception: asynchronous output
            records, see below).

stat,sevr:  These members provide a way for low-level code to 
            set an associated input record's status and severity.
            Note that devGenVar maximises severity in the usual
            way so that the values provided here may be overriden
            from some other error-source. Output records deposit
            their status and severity here during processing
            (exception: asynchronous output records, see below).

Note that it is perfectly legal to connect multiple records to a single
'DevGenVarRec' and it's underlying variable. You can e.g., have one
(input) record reading the variable and another (output) record writing
to it.

Asynchronous Processing
-----------------------
devGenVar supports asynchronous record processing for output records.
This can be useful to make sure the data written by the record
are consumed by low-level code before processing completes. It also
permits low-level code to pass timestamp, status and severity information
back to the record. A GenVar object should hold a valid 'event'
for synchronizing low-level code with record processing.

NOTE: If asynchronous processing is used then ONLY ONE record must
be associated with a given GenVar. Otherwise, the results may be
undefined.

Asynchronous processing is requested by setting the '2' bit in
the flags ('S' parameter of the record's OUT link).

Asynchronous processing of an output record performs the following
steps:

1)  Record processes, locks GenVar's mutex
2)  write low-level variable
3)  write status/severity accumulated so far (for low-level code
    to inspect if desired) to GenVar object
4)  set PACT to indicate phase 1 of record processing to
    record support.
5)  post GenVar's event
6)  unlock GenVar's mutex
7)  complete record processing phase 1

8)  low-level code that was blocked on GenVar's event
    becomes ready to run
9)  low-level code locks GenVar's mutex
10) low-level code consumes data written by record; may
    inspect status/severity.
11) low-level code may set timestamp, status and severity
    to convey this information back to the record (timestamp
    is used by record if TSE==-2). Because record maximises
    severity the values provided by low-level code only
    take effect if severity is bigger than what had
    accumulated during phase 1 processing already.
12) low-level code calls devGenVarProcComplete() which
    performs phase 2 of asynchronous record processing
13) low-level code unlocks GenVar's mutex

Example for asynchronous longout record

low-level code, initialization:

  epicsUInt32 myVar;

  DevGenVarRec myGenVar = {
    DEV_GEN_VAR_INIT( 0, 0, 0, &myVar, DBR_ULONG)
  };

  /* create lock and event */
  devGenVarLockCreate( &myGenVar );
  devGenVarEvtCreate( &myGenVar );
  /* register */
  devGenVarRegister( "myAsyncVar", &myGenVar, 1 );

  while ( 1 ) {
    epicsEventWait( myGenVar.evt );
	devGenVarLock( &myGenVar );
	  /* consume; this may take a while */
      consume( myVar );
      /* set timestamp; may also set status/severity here
       * if something went wrong.
       */
      myVar.ts = myTimestamp;
      /* process phase 2 */
      devGenVarProcComplete( &myGenVar );
    devGenVarUnlock( &myGenVar );
  }

Database:

record(longout, "myAsyncLo") {
  ...
  field(DTYP,  "GenVar")
  # bit '2' in S requests asynchronous processing
  field(OUT,   "#C0 S2 @myAsyncVar")
  # TSE == -2 lets device support set record's timestamp
  field(TSE,   "-2")
  ...
}

 
